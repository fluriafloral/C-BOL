// C-BOL program FOR Merge Sort

/*
    Merges two subarrays of arr[].
    First subarray is arr[l..m].
    Second subarray is arr[m+1..r].
*/
PROCEDURE merge(INTEGER arr[], INTEGER l, INTEGER m, INTEGER r)
    INTEGER i, j, k;
    INTEGER n1 = m - l + 1;
    INTEGER n2 = r - m;

    // Create temp arrays
    INTEGER L[n1], R[n2];

    // Copy data to temp arrays L[] and R[]
    FOR (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    FOR (j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];

    // Merge the temp arrays back into arr[l..r]
    i = 0;
    j = 0;
    k = l;
    WHILE (i < n1 AND j < n2)
        IF (L[i] <= R[j])
            arr[k] = L[i];
            i++;
        ELSE
            arr[k] = R[j];
            j++;
        END-IF;

        k++;
    END-WHILE;

    // Copy the remaining elements of L[],
    // IF there are any
    WHILE (i < n1)
        arr[k] = L[i];
        i++;
        k++;
    END-WHILE;

    // Copy the remaining elements of R[],
    // IF there are any
    WHILE (j < n2)
        arr[k] = R[j];
        j++;
        k++;
    END-WHILE;
END-PROCEDURE;

// l is FOR left index and r is right index of the
// sub-array of arr to be sorted
PROCEDURE mergeSort(INTEGER arr[], INTEGER l, INTEGER r)
    IF (l < r)
        INTEGER m = l + (r - l) / 2;

        // Sort first and second halves
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);

        merge(arr, l, m, r);
    END-IF;
END-PROCEDURE;

// Function to print an array
// A is a copy by C-BOL default behaviour
PROCEDURE printArray(INTEGER A[])
    INTEGER i;
    FOR (i = 0; i < A.size(); i++)
        printf("%d ", A[i]);
        
    printf('\n');
END-PROCEDURE;

// Driver code
INTEGER main()
    INTEGER arr[] = { 12, 11, 13, 5, 6, 7 };
    INTEGER arr_size = sizeof(arr) / sizeof(arr[0]);

    printf("Given array is \n");
    printArray(arr, arr_size);

    mergeSort(arr, 0, arr_size - 1);

    printf("\nSorted array is \n");
    printArray(arr);

    RETURN 0;
END-FUNCTION;
